So, the talk, On Second Acts.  So going back to my high school English teacher, Mr Gascal, he had a thing to say whenever you are accepting an opinion, and you are going to get an opinion, it is not fact, there is no data, the first thing is to understand the person giving you that opinion.  So first step of our plate.  Who is in it?  Hi, I'm Pat, a former.net programmer, joined Ruby in the mid
2000s.  I have organised a Rails camp on my own and with John Barton at one point.  I carpooled with John in the first rail camp.  Shout-out to Ben Askins, you're amazing. (CHEERING AND APPLAUSE)   So, yeah, I am not Pat, I'm John.  So I'm basically evil Pat.  If you remember the movie Sliding Doors, if Pat and I were Gwyneth Paltrow, Pat continued in his career and being a nice person, I've gone full dark side.  So that's the first thing to understand my point of view, I'm post technical, a manager.  I am John Barton.  Mankino, it is art on your computer, I'm loving it.
It is what we call a polyglot shop, which is polite we make all our money on a big old PHP app. Got a bit of Ruby and Go and PHP in the mix.  I have got a good perspective of different
communities at different phases of their life.  If Go is act 1, Ruby act 3, this is where we are at.
How great was Collis's talk this morning.  This is a bullshit do-nothing web service, born out of a frustration with opaque sales copy and Microsoft surfaces, check it out, it's great.  Act 1, the setup.  There are three acts traditionally in a narrative so we'll get into ours.  Does anyone remember a time before iPhones? So 50 per cent of all toilets were factory issued with book like this and the other 50 per cent with one with tedious anecdotes about cricket.  So anyway, I'm in my thinking zone, reading this and weighing up the different programming communities, a
couple of quotes in here that I really love.  There are no second acts in American Lives.  I think GitHub, American programmer, and like something started ticking for me.  The next is like a famous quote from Chekov, a playwrite about, if - and just typed Chekov in the Google search, if there - if we are in act 2, what was our pistol in act 1? So let's think about that.  I am going to tell you a true story.  A few years ago I was involved in founding a tech startup.  Tech startups, investment, did you know investors are rich, like, rich people? Like, it sounds really stupid but I'm an overthinker.  You might be too.  I remember the first time I bought a beer for a millionaire and I had taken money off him to work on this startup and I was "do I buy Carlton Draught and show I take his money seriously, but do I give a millionaire that? Is it appropriate?" But business people, people who found startups.  Collis is a nontechnical founder, he hired engineers.  You

meet lots of people like that because you move around the same meetings and whatever.  I was sitting around for a coffee, we were talking about his product coming out of, proved out the MVP, there is a market and they need to build more.  He asked my advice, what technology should we continue with? Who should we hire? How do we do it? How are we going to be best placed for now and the future? I'm here at the RubyCon, I love it, been programming it since
2007 and I said Python.  I don't know, who else is old enough to remember the great Pythons of the mid 2000s?  That shit hurt, I didn't like saying it.  But you kind of look at the way the supply
and demand is playing out, with talented, experienced engineers, the people you need to lay the
groundwork of a startup.  You look at whether they are venture funded or not.  If they are not venture funder, you can't have the Rubyists.  It doesn't happen.  So I had to continue down the
path of python.  There is an incident in act 1, the incitement, you learn about theatre right now.
Now we work through the incident.  So I think it was really disappointing, the thing that motivated me to give this talk, when I realised the rational thing to say was not Ruby, that's a problem for us.  It's for a couple of reasons.  One, the Australian tech community, or startup community is kind of small.  The health of our eco system needs a very fine balance between diversity and monoculture.  Like, some degree of commercial exploitation requires some monoculture but not America with corn.  This startup, the python startup, the shutoff for us, as people move between jobs and learn off each other and get the echo system going and the thing that lifts - eco system going, we split off, it is done.  We are not trading staff anymore and you can talk about any engineer with engineer anything, but Python? Really? The mid 2000 feels. The other thing that sucks, I loved hearing Linda's talk but this is now an employer who will never hire a Rails girl graduate.  Our community, I don't have a slide for it but I think we can all agree we've got a structural problem with diversity in technology and within the Ruby
community here.  Hands up if you are a 20 to 30s white guy?  Cool.  So we can just accept it as a fact and move on.  Don't need a slide.  And so, our community is so great and it is doing so much
work to help address that.  But boom, you know, in business, that could have been hiring us or
hiring graduates and doing something great to push our community forward is gone.  We are in the senior developer trap.  There are two things to read, I don't have time to go into them deeply about understanding the trap.  There was one blog post about senior developers, I've got a bunch of links at the end, that the problems of startups relying on senior techs, we only hire senior engineers in a way that enforces the problems with gender and everything.  We can only address the issue at the front of the funnel but a lunch of companies are set at hiring at the other end. That is an issue.  Did anyone see the crisis of the modern perl programmer? It is basically the tech, perl was everywhere.  Perl was us.  We are basically list plus perl with the flavour of small talk.  We could go that way if we don't have a good community plan about the growth of our
industry and the growth of our community, we could writing the sad blog posts about the crisis of the modern Ruby death.  I don't want that for me, I like programming, it is great.  So the other thing about this supply/demand thing, we've not been the most gracious winners of the supply/demand curve.  And a good way to say it... we've been jerks a bit.  I think people would
be quite pleased to knock a few of us off our perch.  Just like the plight of the white guys, we have been absolute arseholes through all history, as soon as we are done they will grind us into the dust, done, they're not wrong.  How do we get out? Lots of people thinking about how to improve our community and grow it.  Everyone is talking Matz is nice so we are nice.  I think this is missing the point.  I love - this is probably what I love about Ruby but it is not what grew our community.  This is what makes it special, it makes us want to stay but it is not what got 450
people in a place that can be in a room.  It is this guy, right? He is not nice.  I don't know him, he could be great.  But really, we are - Rails is the virus through which Matz's amazing attitude has
spread through the programming world, this is Rails Conf, basically.  We want to think we're
Matz, but really we're mostly DHH.  Yeah, cool, controversial, sweet... but, I think this is good. Like Rails, remember when Rails got invented? Rails is like the judo flip of software frameworks.  It is all about being in the right place with the right leverage and turning flipping shit, it's great.  Like, it's not about fucking about at the edges.  We get right to the centre of it, everything that is non-essential is automated away or you've dealt with a culture of alignment. People arguing which folders to put files in, I think shit, Rail is still useful.  Model is here, control is here, view is here, done.  It's great.  Rails, I think, it facilitated fuller stack devs than
we'd ever seen before.  I did a talk a couple of years ago where I thought Rails linked the first pro DevOps or pre DevOps.  There is something about Rails, the way it leaks memory like the oil out of my old car, plus whatever else leaks out of it, I don't know cars, I'm a software guy, it's hardware, versus the developer productivity.  It is thinking it at a level back.  That judo flip of actually dollars in, dollar out.  Not what makes a dev go, for nice operations, we can trade these things off.  Everyone I think, very falsely, draws the line of the full stack at the code or like the code running in production.  But you think back, like, to Rails, Rails is the basecamp framework

that came out of a product built by engineers.  With Rails, the business shaped the framework and vice versa.  It is not we just leaked memory and wrote code faster but we changed business models and organisational structures and did the work.  All these things fed into each other in a way that made us effective in the early growth phase, not just we can write code and deploy it, but we can make the smart tradeoffs between coding, operating and business objectives.  So I am thinking is there a way we can bring back that real full stack and help fix our problems? So I just read this awesome book about post war European history, turns out Lennon has textbook for this shit.  We have aims and want to achieve as a group.  What does a Lennonist do? Step one, infiltrate the police and management infrastructures of the state.  I am asking a bunch of you to consider becoming development managers, to embed yourselves in our control plane, so to
speak, and that's an unpopular thing.  I think people want to tweet where is my non-management career path, I want to do technical shit forever.  I think unfortunately for the Ruby community to
be what it needs to be to survive and address our problems is that option is not really open to us
now.  But that's not that bad.  Everyone is familiar with this quote.  I think it is utter horse shit, in all honesty.  It is truism.  There is nothing in it.  You play G sub and the argument is just as
strong although it is meaningless.  You think DevOps and programmer to be a sys and vice versa. Imagine G subbing engineer for housewife and manager for engineer, structurally it is the same argument.  If you said it out loud to someone, you make a housewife a programmer, you lose a
good housewife and get a bad programmer, you should rightfully be shown out.  I think the same holds with management.  But what is missing? No-one has written this book for tech managers.
It is a natural change.  Things feel different, you don't know your mood.  It is okay.  Don't panic.
You really are just going full of stack, like the early day of Rails, we really owned the business outcome of our software so in the kind of size of companies and what we are, management is
that.  Myth one, you don't have to stop coding to become a technical manager.  Especially with
Rails.  Think back to by DevOps couldn't work in Java land is by the time you have written six pages of boilerplate to get something out of your database and still haven't delivered something useful and compare the time you work out thread pools or Java memories or rebooting, I don't even know what Java guys do, pffft.  But there is a lot of things you have got to do, right? It doesn't leave room to evolve skills outside of handwriting database access.  But Rails is hyper productive.  You can ship something useful in half a day and spend the other half of the day helping out your peers and working with everyone around you.  So it is not as violent a transition in our community as I think everyone expects and this is why I think you should be open to it. The other thing, you know this, like, it is surprising how many skills you will already have from various things in your life that make the job an absolutely achievable.  Cool.  What are they, you ask.  So do I.  It is in my notes.  No, actually before I get into things I want to speak to impostor syndrome.  Taking the next step up requires a bit of confidence.  Yeah, it's tough, but you'll be okay.  Cool.  So excon, who's played it? You people are fully qualified to play bus factor in an organisation.  Gunnery sergeant, that's cool.  Space, aliens firing awesome stuff.  And then you are on a mission, three quarters on the way to end and left with these guys, level one and the aliens are hard.  This is staff management.  You've got to balance your projects around, you can't rely on the one ninja rock star hero to do all the projects and then he quits and then you are left with nothing.  You carefully balance your product portfolio, move people around, share XP. Really, that's it.  How much XP do you have in user RB? You are dual class, you can do ops and dev, fantastic.  Sieve 3, man, that's influential on my management technique, so much richness in the tech tree.  It even has tech in the name.  First thing, you start learning like you treat an iteration like a turn in civilisation.  You don't do things in the iteration, you just go this iteration
this happens and that one, we make this such science out put, this one we have a riot and DevOps a monarchy.  Constitutional monarchy, we're not savages.  But to me, the best way to visualise is you work your way through, you think of Keith's talk when he talks about version control.  It is like the animal husbandry of the tech tree.  That then opens up new options like automated deployment, so automated deployment over here and then maybe test-driven development, then you can go to continuous delivery.  You just work your way through the tree and so thinking with this kind of model is handy, because (a), it is cool.  (B), you know implicitly you can't jump to space shuttles, you have got to work your way up.  A lot of management is just working your
way up.  You can't put 100 per cent of your productivity into climbing that tech tree.  You do have to every now and again go around and poke your opponents with sticks, knock an empire or
two off and then come back and wallow in your amazing scientific progress.  One other part, you
don't want to be the team that won just by having a lot of people poking people with sticks.  I mean, that is Java development, really.  I mean, some people have won that way, but it's not our style.  General OR design, it is amazing how applicable good - like concepts of information hiding, obstruction, API design, design by contract.  Contract is a word that was taken out of business and put into software, take it back and use it again.  Designing clean interfaces so you

can have three people over here working on one project and another group over here and what are the ways of these groups interrelating are all stuff you do every day.  Naming is interesting. They want to name themselves often.  So Team Night rider and the A-team at work at the minute.  You don't have naming problems but everything else is great.  So let's say, hypothetically, that some of you okay, maybe I could do some management stuff, that could be okay.  What do I do? How do I do it? How do I go into it? So I think the apprentice model is incredibly interesting.  In the States they are doing good work about it.  I won't go too much into
it.  But that step from going from individual craftsperson to team of two, that's basically the MVP
of leadership and management.  I wrote up a list, I won't read it, you can read it.  I won't go through the points but one thing I did want to highlight is the bottom one.  If there is one thing
that people are most afraid of, is stepping into and owning a group of people, it is firing, it is a
possibility that you might have to do.  It's incredibly unpleasant, I'm not going to lie and say that it's fun.  But it's the flip side.  We want to achieve real outcomes, real things happening with real consequences are not bad.  I don't think it is an excuse to not act, it is a reason to act well.  It is mostly avoidable if you act with care.  It is emotionally challenging when the comes up.  But if you can face that kind of fear and feel like the risk is worth it, I would say give it a try.  Please give it a try.  I can imagine if 20 people in here go I can make the case, I can bring on a graduate or code academy or university or any of these things and say I am going to be personally responsible to get this person into our community in a way that matters, it would make a great difference to our community.  So, do it, try it.  It's great.  It's not that hard.  It's a little bit hard. Fine thing, the second fear is there are interpersonal challenges in managing a team of software developers.  Some of them will choose Emax against any better advice, and that's like the least of it.  So I'm really hoping with this talk that maybe five or 10 of you are convinced to step into leading a group of engineers to help push the industry, help our community industry puzzle forward.  But for everyone else, I want you to support that.  Because.  We all get the best
outcome if we lead ourselves but if we make that too hard to happen, like, the role will be filled by agile coachers and other petty tyrants.  And at that point, we can't achieve our community
aims, I think it is important to do something about juniors, it becomes something about someone
else's process, not what the group can own.  Notes, I had another point.  So going back to the second act of your lives is not to leave Ruby to be go programmers or node programmers or Haskell programmers, once you get bored, but because that is just another first act.  I want your second act to be a step into leadership in this community.  The second quote, the pistol that goes off, I kind of built one into this talk, I'm here but I forgot to mention it, fuck! I'm here in my computer programmer's costume so you guys can relate to me as a human.  Because I'm a post technical.  So I saw Hannah Donovan talk about burnout and she spoke about how the kind of programmer uniform of the hoodie, the T-shirt, the crappy shoes, really bummed her out.  Like she's passionate about fashion and it's stifling her creativity to some extent and she just wasn't happy.  That in itself is a diversity of people trying to lean into our social group, there is a bit of push back, magnetic repulsion.  I am getting married in a few weeks purely because I learned to address as an adult.  I'm super excited and she hates this T-shirt.  But I still write code a few days a week, as I am leaning out of the group, I can feel the magnetic pull back in to make sure I've
got something that culturally identifies here.  I think part of being manageable and helping this process, and helping some of become leaders is being aware the role is changing.  But they are not leaving us, leaving the community, they are just growing a bit and we need to relax the Brogrammer code and relax.  That is kind of all my points.  We're over. Come talk to me at the pub.  It will be great, I'll be drunk.  Here are some links.  I am going to post these.  20 minutes is a short time to talk and these are complex things but I recommend you read all of these. Hopefully some of you can step into the leadership and help us get on top of our community issues and not being the second coming of perl.  That's not good.  Thank you.
