Awesome. So this is my second Ruby Conf from Australia.  I am super excited to be here for a second time. So thank you all.  My title isn't quite right.  Normally when I do this talk I cover a lot of the
basics but given you guys are an advanced group, despite the impostor syndrome, I am going to take it we don't need to cover all those.  So the title should be Hackers Fraud in the History of Guerilla Warfare.  I am developer at WiPay.  I live in Denver, Colorado, that's in America.  We don't believe that we are impostors of anything because we are always the best.  Despite being a member of the US, I am also a member of Ruby NZ.  It turns out, yeah, let's clap for that, thank you. (APPLAUSE)  The requirement was I wrote my name on a form in my email address.  Now I'm a member, I'm really excited.  I hope there's cards.  So I throw a conference call happiness Conf.  It is in Boston, which is also in America... and it is a conference about developer happiness, our CPF is open, if you go to paper call.Io/happiness conf you submit a talk so we can spend lots of money and fly you to America.  I don't know why I'm suggesting that.  What we are going to today, we are going to learn the lineage of hackers and strategies to identify fraud in
your apps.  But first I have a story.  So I promised you that this is going to be on guerilla warfare so let's start with had origins of that.  The term guerilla comes from the French term,
le petit geurilla.  My apologies if it is not.  I am American, I am going to pronounce it how I
want.  It means small war.  It refers to Spanish irregulars who fought Napoleon in the early
1800s.  But who were the first guerilla fighters? Mel Brooks, in fact, Robert the Bruce never fought a battle where he didn't have the higher ground, which is why he is known as the guerilla king.  Judas Macabee, this is the Hebrew hammer you will only see this movie late at night. They would get people to come into a small mountain pass and shoot down at them, that is how you defeat the Romans.  Today we are going to talk about a group, us and most people here are from a western culture, and this is a group that we don't really talk about.  But they are called
Shung Nu.  I Googled how to pronounce it, that is how we are going to go with.  While you have probably never heard of them, who has seen the movie Mulan? A Disney movie? I'll make a man
out of you.  It is really good, you should watch it even if you don't have kids or something.  In
that movie, there is that guy, who is weirdly similar.  It was based on the Shung Nu.  Interestingly enough, but very loosely based because it is a Disney movie.  So they were known as mountain barbarians, horsemen who frequently humiliated the Chinese who were known at the time as the celestial empire.  In battle they were a nomadic tribe, a series of tribes.  They would go from
place to place, plundering and raiding as they went.  They had to be tracked down in order to attack them.  As this quote suggests, just like Robert the Bruce, they never fought a fair fight, when they saw one they ran.  So the Chinese established a policy called He Quin, the Chinese would marry off a Chinese princess to the Shung Nu to add them to their celestial empire.  The Chinese would take ever increasing bribes to placate them from their plundering.  It only lasted so long because they continued plundering anyways, while getting paid.  The Shung Nu were an elusive federation of tribes so there wasn't any leadership.  So the Chinese established a professional army that was dispatched to the frontier to fight the Shung Nu in a similar nomadic manner.  When they first started it worked out really well, they were able to follow them but
no-one wanted to do this job.  Essentially, you become a nomad, fighting a nomadic tribe and

chasing them across the desert.  That's not really that fun.  So they went back to paying them.  So the problem with the Shung Nu is they weren't concerned with occupying lands or overthrowing the dynasty, they wanted to raid.  So today it is similar to how hackers work.  They often work by themselves, sharing information at times and then they might even join up into these hacker collectives to take on big challenges.  That's where Will Sack and Anonymous have come from. They are banded and constantly changing allegiances.  While in a world where guerilla tactics work so well, employ a conventional army.  Why give up the light footprint the Viet Cong used
to armies like these who are notoriously efficient and easy to pick off and seemingly wasteful. Just look at those hats.  The best example is the Turks.  So they were this raiding tribe and they
eventually created this conventional army when they become the Ottoman empire.  The raiders, this is a photo of the battle of Constantinople.  The battle required 69 cannons, 227-foot guns
firing half tonne stone balls.  Small raider tribes couldn't handle it.  When people get greedy and want to acquire land assets and power they can't just raid, they need a conventional army.  Sound
like our hacker friends? They have the same cultural affinity.  They attack weak, easily
conquered targets.  They retreat at a moment's notice.  When faced with a specific challenge they will group up and then disperse at a moment's notice.  So, what are the hordes doing to you?
They will look for vulnerability on your site and will take advantage of it as quickly and as often
as possible.  There is no slow ramp up.  It is one day you are not being attacked and the next day they are hitting you as hard as they can.  The reason for this is when they find a problem on your site, they are often going to go out to a little website on the dark web or even on a normal forum
and be, "Hey, look at this hack I found on his website.  You should try it too".  So you are just
sort of inundated.  But once it is fixed, they are smart, they are going to retreat, rethink, and then find a new way to go after you until the point where the effort to find a new vulnerability on your
site is worth less than the time it takes them to find it.  So how do you even know if you are
being raided? To determine what you should be looking for your patterns are going to be specific to your app.  Every app has its own unique patterns and characteristics.  You need to think like a hacker and get into the mind of a hacker breaking into your system.  How would you break into it? What is vulnerable, what would they do? Once you know what to look for you can start to add tracking to those specific aspects of your app.  They are going to notify you when someone is trying to break in.  When in question, remember to record as many data points as you can.  You will never regret having too much data in your system.  Essential patterns are ones you can't get around doing.  They are things in your app for someone to use it they have to do.  It is either
black or white.  If you want to take money out, it is true with any payment system, if you want to take out funds, you need a login, you need to give us your soch and address and we need enough information from the Internet to verify you are a real person.  There is Equfact and credit checks so we are confident we are giving the money to a real person.  You also need a bank account. This isn't the easiest thing to set up and it has to be one that we haven't flagged.  It is an essential pattern because without all these pieces of data there is no way we are going to send you funds. With these patterns you can block on these and be as hard as you want.  If someone doesn't have this data you don't need to act and send them funds or do whatever action on your app is going to give them something of value.  The other type of pattern is a non-essential pattern.  These are
things that you can't block on but they might be associated with fraud.  But other times are totally legit.  Rarely can you just outright block.  You are typically going to take a series of these
patterns and say if this is going on and this is going on, there might be something fishy and we
should probably look into this.  So these are going to be different for you, but if someone recently breaks in and hacks into your account, they are probably going, the first thing they are probably going to do is change the password, change the email.  And they are likely logging in from a new IP. So you the metadata of how different the person looks than before.  If they are broken in and if you are dealing with money, they have only done a transaction of $20 and suddenly you see
$20,000 dropped into their bank account, well, that's a red flag.  In the example of attackers, if anyone wants to break into web sites, the following is a great way to start.  99 per cent of the
sites out there, and probably most of yours, have no way to defend against an attack like this.
The question is, why is it such a hard problem? Because there are no essential patterns.  There is no way for someone in an attack like this to just block you out.  This is an attack on all the accounts in the system, there is no re-try limit that is going to be met but eventually they will start breaking in.  Your only hope is you have great password requirements and everyone is
actually using them.  Just to step back, your passwords should follow everything here.  There is a bank in the US where your password is limited to eight characters.  That's the maximum.  An
eight-character password.  You don't want to be that guy.  Web people have a password as long
as they want. It doesn't make a difference.  So when you are looking at one of these horizontal password attacks, you can look at things about the type of traffic that is actually coming in.  You can look at how fast people are trying to log in, from what IPs, other telltale signs that bots are

looking at you.  They are likely associated with some unusual traffic event.  One strategy to determine if you're being attacked and notify you is this here.  You need to record everything that is going on when someone is trying to log in.  You need a way to be notified.  If all you know is when your traffic spikes and you're, Oh, traffic is up today.  Great, that's a good thing.  People are using our site.  I don't know about you, but nine times out of 10 for me it is because a bot found me, not because we went on the front of hacker news.  We need to be recording this and we need the data to detect any problems.  We need some way to create a fingerprint of what this bot looks like.  Because the IPs, they can change.  But the metadata is likely to be consistent.  Now, if they are smart they can change a lot of this up.  But you can often times develop what looks like a fingerprint of what someone who is trying to break in is going to look like.  And that's basically your only hope to keep the people out besides your passwords.  An example is Twitter.  Let's say there are Spam bots, which used to be a huge problem, how do we stop a Spam bot that has compromised someone's account? You are a hacker and break in, the likely strategy is you are going to change the password and then hook up a third-party API because you won't do it yourself.  You are going to have a bot to handle it.  They might start following a new accounts, they might start Tweeting out at a much higher rate than is normal.  They might be Tweeting out links, Spam links.  So all of those things are going to change, along with what hours that user is likely Tweeting.  So one way to do that is just like someone changes their password and they add a 3rd-party API.  You say, "Okay, that person might be fraud, we should look into that".  That is
a really weak method unfortunately.  Because maybe I forgot my password and now I'm adding on tweet deck and it will catch me.  You want something more robust.  Perhaps you have some sort of white list, which I know Twitter does actually have.  Maybe that API triggers a large amount of Tweets.  Maybe that's the trigger and your data is going to be different but something is going to give you the telltale sign that something is wrong.  There is more advance patterns, of course, the Tweets themselves could be changing.  The Tweet quality could be changing or some unusual logins.  There is a lot of different ways you can train a classifier to classify the data.  But you need to be collecting it in the first place to analyse that and pull it out.  So what do we learn? We learn that you need to identify what your essential patterns are.  These are the things you can block on and be really strict about.  You can identify what your nonessential patterns, determine how you want to track them and how you want to monitor them.  As with the celestial empire,
we too have a way to pay our hordes.  We have web sites like hacker 1 and bug crowd where we can pay people to hack our web sites for us.  But instead of stealing things and things like that, we pay them money to let us know.  And in addition a great way, because instead of taking the
risk of breaking into your site, I am just going to go and look at it, find the bug and maybe you'll
give me $500.  Might be lucrative but all the big sites, Facebook and Twitter, are employing strategies.  It doesn't cost you anything to get it started until people start finding bugs.  You
should all be doing the basics, read the Rails security guide.  It is basically all you need.  But it is
a scary world.  When you are dealing with these security problems you have a constituency that you need to keep safe and those are your users.  When you are thinking about identifying fraud and things like that, don't think of it as a chore.  Security shouldn't be a chore, it could be fun. Think about it that you are Sherlock Holmes and you going and figuring out how do I get in the mind of the hacker, what might I do? So I want you to all go home and I want you to think about what are you patterns, how do you track down the raiding hordes and how do you be the Sherlock Holmes to keep your users safe.  Thank you.
