So, programming is an odd thing.  It's been about 70 years since the first programmable computer, the Zeus C1.  Still, we grapple with this idea of computational behaviour, when a human tells a machine what it does, what it does.  The unseen ramifications. The poor robots have simplistic rules of avoiding each other but they are stuck in some complex route the programmer had no realisation of, that is, me.  But we haven't been sitting on our arse for the last 70 years, we have a bunch of solutions.  We turn to computer science where the general approach to the messiness of humans is to move to a more mathematical formula model where we can make proofs, where we can rely more on specification and this is fantastic.  This is the basis of most of our programming languages but it kind of removes the human and doesn't answer the fact you control the thing, you can't wipe out your memory or hard drive unless you are using C.  The school of engineering is more about process and practices.  So this, I guess, is what we a lot talk about, thinking about unit tests, integration tests, regression tests, sandboxing, the calculation.  We have things to test what the machine does.  What the human told it to do is what it does.  Those two are fairly common to everyone but the kind of thing I want to focus on
is the performer.  And the performer has a very different perspective to those two schools in that there is no so much focus on long-term building.  It is more focussed on expression and thinking specifically about code, it's more about code being the interface, rather than building something that is an interface.  The possibility of taming the tiger of raw computational complexity on stage is terrifying and also what makes it live.  There has to be a risk in life, there is more passion, more danger of them screwing up, the guitar strings can bring and to me that's a very important part of programming.  This is where the life coding comes in.  It is simply the idea of writing algorithms and adding to them in real time.  It is probably some most of you have done, if you think of ILB you are live coding.  We don't tend to do that in front of an audience of all these people, understandably so, but it is a wonderful way to explore and have very fast feedback. Something kind of special happens when you have your code and it manifests itself in the physical space.  So this is an example taken from Goda Lesha Park, and we have this language

here, we have no context of what it generates.  We know in programming it is super helpful to have fast feedback, you break a code and have feedback, it is valuable.  When we perform code and it does something like play music or have an output, it allows you as the audience to have your own semantic code.  I am going to drill on about this but if I show you the out put next to the program, there is something kind of special that now you look at those symbols they are no longer random characters.  Suddenly you see meaning in that code.  That, to me, is something I am really interested in and passionate about.  We have huge amounts of power at our fingertips as programmers.  I feel we are only beginning to touch the iceberg of what we can do, not just building engineering systems but how we express ourselves.  Poetry is something that is live coded.  This is from Newcastle in London by a guy called Alex McClean.  Code is already literature, code is already poetry.  There was a Stamford 2015 code poetry jam, or bash, something like that, basically the people wrote code and the code was poetry.  It executed the code and it also read aloud poetry.  So it is having the code and seeing the output in the real world.  Katie Sicther is a programmer in New York.  She is live coding a human.  She is projecting her code screen on to the ground there and the dancer is following instructions. Again, this has this special thing of not just seeing the performance but seeing the choreography
and being able to see it and see the artist's interpretation of it and what they do with that.  She has done fascinating research and I recommend checking her out.  This is a band called Slub.  What
they have been doing is generating music and graphics.  What is particularly interesting is they have experimented with different ways of visualising code.  Performing live changes everything
and most IDs are not very capable of dealing with that.  In this example, what he has done with a
list language is simply used the closures as bricks.  The flashing lines are the connectivity of the music as to what is active. You can see and drag bricks and move bricks around moving scopes
and closures.  This also, segueing onto something I think we can learn from computer
programming it is so immersed in live feedback, it makes normal programming feel a bit dead and there is something interesting in that.  Yes, Karen Miles at Strange Loop 2014, live programmed robots.  She had a drone flying and I think she had two spheric balls.  Another thing you can program.  As well live coding lots of people are doing interesting things around weaving, around teaching kids programming, all through this live stuff.  I think live coding is an art form now.  It exists a little bit in a niche.  It tends to be more musicians and to me that is the problem I want to tackle.  In doing that we need to take the random signals that have no meaning and give them meaning, generally trying to build audiences for codes so it can become a more main
stream.  Here my daughter is playing sonic pi.  She just mashes it but it is fun.  Sonic Pi, it runs,
$30 which means it is massive in the school system, lots of people are using it to teach.  There is a whole bunch of teaching resources around these.  Teaching music through live coding, it is
more about using musical theory without the overhead of having the have the instrument. Learning programming is something I am passionate about.  It is an extremely expressive way to
teach.  It is going on in the United Kingdom.  A whole bunch of schools are using these.  There are school orchestras popping up where kids are live coding.  So if you are looking out for the
next Daft Punk it will be live coded, I hope.  So before I go into my demos, something really interesting happens with Sonic Pi.  It takes a whole bunch of disparate groups of people who
don't communicate very effectively and brings them this common ground of music and coding.  I myself am a programmer.  I have gone to music concerts and festivals and performed programming.  And musicians have come to programming conferences and performed there.
And to me this is kind of beautiful and something we are lacking in terms of diversity of mindsets, not just about engineering where the money is or computer science where the power is
but about creativity and design.  So now if the next 10 minutes I have to live code, because the talk is about live coding.  It kind of makes sense.  It will all horribly go wrong because it is live,
and that's the way live works.  Scary is good.  The first thing I will start with is Sonic Pi, we should approach it as a small kit.  So the first thing we want to do is the fastest possible route to
feedback.  So play 60.  Caps locking on and take it off.  Wow! That's kind of cool.  But everything is actually inherently concurrent.  So if I play 62, another note (note plays) they sound
together.  So already we are dealing with concurrency.  Let's try something more musical.  Okay, very simple sample.  I don't really know much about programming but I do know I want my music to continue playing, fairly simple.  I will turn it down and it died.  It is still going, let's stop
it.  We didn't tell it to stop, it will just play infinitely through time samples.  So what we need is a sleep. This is not actually a thread sleep, this is adjusting for garbage collection and prior
execution time.  So in fact this is like sleep, you can think of it as a beat and it is internally calculating a Delta which determines timing.  So when we hit play (music plays) in about three
or four lines of code we have something very simple, music.  But we also want to then do more, so we want to play another sample.  So let's try something a bit different.  And you will notice it
doesn't place, right.  Because we are stuck in an infinite loop.  So we need to introduce

concurrency, which I did not cover until my first year at university and 6-year-old kids are learning it, live loops.  It is putting the two things into threads.  We do teach threads to small kids and they get it.  Because it is music, right.  You want two things to play at the same time.  A ridiculously simple concept.  So when I hit play, you will notice they are completely out of sync. So we need to learn how to do concurrent coordination.  So we need the two threads to be able to synchronise with each other.  Wow! This is live, I killed it.  Okay, let's just move on.  So from here we can continue running our algorithm and start live editing and messing around are variables outside.  Inside each of the live loops there is a function and you are editing a function. That is better.  If in doubt, just make it... yeah (music plays) and sync.  Wow, I really did kill it, that is fantastic.  But the point is they can continue editing and running it.  Looping through iterators and then thinking about case statements and checking when beats are equivalent to certain numbers and you can kind of see from very simple coding concepts that we are building up a more and more complicated algorithm and getting the music more complex and in depth.  I wanted to show you briefly - let's do examples first.  That's great but we want to be as accessible to kids and musicians as possible so they can grab a bunch of examples.  There is lots of documentation.  They can grab something and start playing (music plays) wait for it... and the cool thing is they have this running and they can start modifying it live and mess around with the optatives.  It is great for hearing and the feedback loop.  It is a lot of fun.  I actually spent most of one day when I was here just sitting by the river working on the piece and what I said was very close to the material here, this is just Ruby.  So there is no reason Ruby programmers, musicians and kids can't get involved in more programming.  Kids have done fascinating drum sampling algorithms, ones and zeros to express hits.  I am changing the level of extractions so rather than doing anything in code I am actually doing it in poetry and I'm converting it into notes and
music.  Let's try something and see if it works.  (Music plays) I can really just play with this all day.  I spend four hours just messing around with this stuff.  Okay, segue, that's is Sonic Pi,
available on Mac, Windows and Raspberry.  I want to show you closure.  More because I want to
show you, for my small part of working on it, where I want it to go.  A lot is about visuals which makes the tools even more accessible especially with partial hearing or a hearing problem, to see the sound is an important thing and also for confidence for people who don't know what they are doing like me.  So I'll go flat out and see what happens.  Please don't hate me for using Closure.
It always takes a little while to get booted up.  (Music plays) I think coding is a hugely exciting and passionate thing. (CHEERING AND APPLAUSE)  Thank you very much, guys.  It's a pleasure.
