So my name is Linda.  I come from Helsinki, Finland.  I'm an author, illustrator and publisher.  Because of our self-deprecating nature, the only thing I am confident about saying is I am a dropout.  I founded Rails Girls in
2010.  It was supposed to be a workshop but today is has been in over 207 cities, run by volunteers, run from Berlin all the way to Australia.  It has been amazing to see how the community has grown around that.  After working on Rails Girls I went to New York to work at Hort Academy.  I was the fifth employee and realised I didn't want to do startups and wanted to go home to Helsinki.  It raised a big question, what do I want to do next? I thought about my career in technology and realised I had never been alone.  I had a little saviour with me.  Every time I ran into something I couldn't understand - what is garbage collection - I would like to think how a 6-year-old girl would explain it.  I had enough startup zeal left in me - what is the most scalable change a person can do in the world? And instead of apps I thought about childhood, because if we can affect the way kids see the world we can raise a totally different world of adults.  So I wanted to become a children's book author.  There were three programs. The first thing I had never written a book before.  I was a really, really bad illustrator and I considered myself a mediocre programmer with very little industrial experience, no formal training and no institutional knowledge of early childhood or pedology.  But I decided let's try it out.  I tried to look for the oldest Ruby pictures I could find.  They are from 2009 and they are not very good.  But I kept on drawing every single day and slowly the pictures got better.  And one of the things that really motivated me was seeing the other cities around the world making
their own versions of Ruby and her ventures and slowly the pictures became better.  Last January I made, in some ways the best decision, in some ways the worst decision in my life, and I put this project that was a tiny side project on kick-starter.  $380,000 of preorders came in and it became
a massive thing to teach all kids computational skills.  It has been a year of heartache and crying and anxieties.  I wanted to give you an idea of how I have gone through this whole thing.  If there
is a lesson here is that ideas rarely come out resonant and striking and beautiful, they are really messy and you don't know what is going it come out but you need to lean forward and try.  I
needed help on the journey.  I had an idea about a book, I had a little experience of teaching programming but I needed help to guide me on the process.  So I came up with my Principles of
Play.  I am going to talk to you for a second about programming in play and then introduce the three principles that have helped me build Ruby's World.  So one of the exercises is I mentioned over here, on Hello Ruby.com.  You can download them, see how they work and you can also
see what other kids have built around these exercises.  Before I get to the Principles of Play, I
want you to be Alice with me and go deep, deep inside the computer.  If coding is the new literacy, if JavaScript is the new framework, we don't need lessons, we need poetry classes.  The
same way I learned Finnish, for grammar and reading, a lot of books and analysing other people's
writings and writing my own bad poems and essays, and it is one program in a bigger area of computational thinking.  It is the same as if physicists were to use prisms.  We need to get kids who don't have a natural affinity for computers to see it as the new expression and the
modern-day LEGOs and Crayollas.  I was this little girl.  I had no interest in computers growing up.  I talk about little girls here, but please feel free to replace the whole thing with any other
minority or group of people who don't naturally gravitate towards computers.  Little girls, they
don't know that they are not supposed to like computers.  I loved French, philosophy, art, coming up with imaginative storytelling, but the future little girls are going to be different.  They are
precise, they know how to concentrate.  They are awesome at asking the questions of what if, and
why, and how does it work.  They don't know they are not supposed to like computers.  So I figured how should computing or coding be taught to these kids?  I came up with this list of topics and tools and practices about programming.  I think many of the things you can actually learn even before you learn the term, so before you learn what an array is you can learn about the idea of selection, or you can learn about repetition.  And in some ways planning a 3-course meal

is like planning an algorithm, or in some ways our years are full of little loops of a sequence of seven-day weeks and then repeat them 52 times.  Whenever we get a road from place A to B we are in effect decomposing a problem.  One of the big problems I saw in this world was that there is two types of pleasure in programming.  Any time I spoke with programmers they kind of in some ways showed it to me.  There is the more intellectual pleasure of solving a hard theoretical problem or writing code that is beautiful and resonant, but also the physical kind of joy of fiddling around and falling over and eventually making the computer obey you.  That is called play.  That is the side of programming I wanted to bring out.  As a little girl who learned
philosophy, I loved Bernard Russell and his logic that found its home from the computer.  I loved conjugating French verbs, which involves a lot of pattern recognition skills and obstruction skills.
I loved knitting, which is a symbolic representation full of selections and sequences and
repetition.  So it totally does make sense for a little girl to get excited about computing.  I went to the best, namely, Sesame Street.  I spoke with them and they said three things that made them special, back in the day, back in the '60s, children's television was totally new and no-one had done what they were anticipating on doing and they said "fun is paramount.  You need to make it fun or kids won't do it".  They were rigorous in testing everything, AV testing, before there was a term called AV testing.  They involved the university, the researchers to develop their
curriculum.  They said that play is one of the things that affects most of our behaviour or our cognitive or social wellbeing and learning.  Another company that is famous for their approach in play is LEGO.  Adults think about play, we often think about games with rules but LEGO says
no, there is five types of different play, there is physical play, play with objects, symbolic and
other play.  LEGO research mapped out the different motivations of play.  They say there is achievement-based motivation, social-based motivation and immersive motivation.  When we as
programmers look at the list, we get to play in the best scenarios all day long with our code, we
can recognise a lot of things.  There is self-disclosure, finding and giving support, there is exploration, corroboration, there is even escape from real life.  The problem is often times we only teach these things, progress, power, numbers, optimisation, when we start to seriously teach kids about coding.  So one can figure out a system where you can be teaching all of these things.
I came up with three things.  Playfulness, curiosity.  The first, playfulness, it starts with asking the question "what if"? What if something happens.  It starts with little Ruby.  She is 6 years old, completely fearless, stomps and stumbles around the world and sees the colourful side of computer.  When I talk to people, normal people, layman people, they say programming is such a silent thing, the programmer sits in front of the computer and the breakthroughs are silent, they just sit there and typing on the computer.  All the culture is hidden in the murky underground Internet forums.  So Ruby is here to bring all that out.  If you tell Ruby to change clothes for school, she will, but she will leave her pyjamas on because you didn't tell her to take it off.  If
you tell her to clean the room of all the toys, she will do that but will leave the papers and pens on the floor because, "come on, papers and pens are not toys".  Ruby has a dress code.  She is
very particular about the clothes she wears on each day.  So on Mondays she wears only clothes
that are red and green.  On Tuesday she wears clothes that are yellow or green.  On Wednesday she wears clothes that are not black.  Ruby understands that big problems are small problems stuck together.  And bugs do exist, they live under your beg, they have pointy teeth but you are not supposed to be afraid of them.  The second rule is the principle starts with the question, how? One of the things I dislike about our modern world is that we teach kids how combustion engines work, how babies are born, but when they ask about computers and how they function and the rules we say it is a black box and don't touch it and tinker with it and don't try to make it better. That is what programmers do every day.  Asking the question, how.  So Ruby knows when you bake cupcakes you need to have a sequence of orders.  If you do the correctly you can group different sequences of orders to different kinds of groups to make different amounts of cupcakes or different types.  She is really good at spotting patterns in snow leopards, wallpapers and
finding the truth about the different bugs.  She compares different bugs together and is really poignant in describing her friends.  The last principle is one of curiosity and most important and starts with asking the question why.  As I said before, it is funny when you think about parents and adults and us today, we have forgotten the past about computers and their poetic and pragmatic nature of them.  We teach our kids how a combustion engine works, how the human body works, how to become an astronaut, even in Finland where we've never had an astronaut before.  But when kids come to me and ask what is a bubble-sorting algorithm and what happens when I press play on YouTube, and is Internet a place, we adults grow oddly silent.  We mutter something about it being something complicated or it being magic.  It is neither.  It is not magic and it's not complicated.  It all just happened really fast.  Computer scientists are among my favourite people on earth but the things they've done, they've built up layers and layers of obstruction to shield us normal people so we don't have an idea what a computer is.  With the

kids we start with the very basics and start by talking about what is a computer.  I show them four pictures, a picture of a car, a dog, a grocery store and a toilet.  I ask which one of these is a computer.  At first kids project their parents' ideas about a computer and say a car is not a computer and a dog is an animal, not a computer.  Then we talk further and realise yes, there is a navigation system in a car and a dog is not a computer but maybe the collar can have it and maybe in the future it can have a computer inside.  And grocery stores where they used to be so big, the computers in a big room, and when the kids grow up the computers will be so tiny they can fit them in each milk bottle, and then the kids' eyes light up.  The favourite thing is the toilet example.  I tell them even in Japan, the toilets are computers.  But the more important thing, we built our first computer.  It looks like this.  A tiny computer and they learn about the processor that lives inside of it.  They learn about the role of RAM and learn where summer vacation pictures go to into the hard drive and what happens to the computer if you get a virus inside.
And they design their own application for a computer.  I have a 4-year-old boy called Arthur and he loves LEGO.  He designed a little button that allows you to print out the colouring pages.  But
he wasn't happy with that.  He felt "why should I print colouring-in pages if I can print LEGOs?"
He went totally wild and started printing out with his paper computer and appliances like a toaster, and at the family breakfast the next morning the mother was hesitant and said I don't think it is possible.  But I said it is totally possible.  When Arthur grows up he will print his own LEGO.  And then a little girl 6-year-old, and her name was Ada and she wanted to be a dolphin doctor when she grows up and didn't feel computers were her thing.  But we talked about it and realised that dolphin doctors need an application thingy and she designed it herself, she was a
very proud future dolphin doctor.  But my favourite story the whole time was the story of the boy
Tommy.  Tommy loved being playing an astronaut with his father.  So in Tommy's world he had his little laptop and big earplugs, things on his head, and the father was the astronaut.  And the father was on the other side of the room and Tommy sits here, and Tommy's role is to guide with his self-made intergalactic planetary observation the father home from the Martian orbit.  These kids will have a profoundly different experience with technology.  They will have a more playful and imaginative journey through the world of programming.  Finally, none of this is really new.
I think our industry is super special in the way it has treated children and possibilities in the past. Already, they have made marvellous things.  One of the most fascinating concepts they came up with in the '50s was a child machine.  In simplest terms, what if we start to teach artificial intelligence the same way we teach children and learn bout patterns to get the computer to learn? Bless him, he came up with this wonderful research paper called "20 things you can do with computers in the '70s" where he said kids should be able to produce things and create things on a computer instead of just calculating the route numbers of 21 prime numbers.  If you haven't read this, it is an amazing piece from the Xerox park.  Software and storytelling have a long road together.  Here is a bunch of books that really influenced me.  And books for older kids who will read themselves, and then the book that brought me to the world of programming.  I don't think it taught me anything about programming but it showed me how much wit and imagination there is in the community and it made me care and that's why we need storytellers.  When I talk with people who are not programmers, the perception is that computers write code and computer languages are written by computers.  I tell them no that is not the case.  Code is written by humans for other humans to read and modify but it is a human thing.  In the past, computers were people who were really good at calculating things and technology as a word, in the Greek era, it used to mean not only the skills and the tools and techniques to get something done but also the skills and competencies of the humans building these things.  It is why we need storytellers.
When I was small, I wanted to be a well builder.  I wanted to wake up in the morning in the valley, I wanted to roam around.  I wanted to go to sleep in the Narnia world.  No-one told me I wouldn't ever graduate to become that.  But I found a little poem and that is programming. Because programmers, you are the storytellers of the universe.  Out of nothing you can create entire universes with the pure power of words.  That's all I have to today.  Thank you.
